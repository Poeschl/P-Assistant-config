substitutions:
  devicename: schreibtisch_monitor
  human_devicename: 'Schreibtisch Monitor'

packages:
  wifi: !include includes/wifi.yaml
  common: !include includes/common.yaml
  mqtt: !include includes/mqtt.yaml

esp8266:
  board: nodemcuv2

wled:

light:
  - platform: neopixelbus
    id: led
    type: GRB
    variant: WS2812x
    pin: D1
    num_leds: 160
    name: "Monitorbeleuchtung"
    effects:
      - wled:
      - addressable_scan:
          name: Scan
          scan_width: 8
          move_interval: 20ms
      - addressable_lambda:
          name: Red Glitter
          update_interval: 18ms
          lambda:
            static int state = 0;

            if (initial_run){
              state = 0;

              it.all() = Color(128,0,0);

              ESP_LOGD("custom", "Gold Glitter");
            } else {

              it.all() = Color(128,0,0);

              if(state==0){
                int i = rand() % it.size();
                it[i] = Color::WHITE;
                state += 1;
              } else {
                state += 1;
                state = state % 10;
              }
            }
      - addressable_lambda:
          name: Rainbow
          lambda: |-
            uint8_t led_change = 20; //(higher is more change) the difference in hue for each led down the strip
            float speed = 7; //(lower is faster) the speed the first led colour changes at (therefore affecting all)
            
            if (initial_run) {
              it.all() = Color(0, 0, 0);
            }
            
            unsigned long time = millis() / speed;
            int repetitions = time / 1529;
            uint16_t hue = time - (1529 * repetitions);
            
            for (int i = 0; i < it.size(); i++) {
              if (hue >= 0 && hue < 255) {
                uint8_t green = hue;
                it[i] = Color(255, green, 0);
              } else if (hue >= 255 && hue < 510) {
                uint8_t red = hue - 255;
                it[i] = Color((255 - red), 255, 0);
              } else if (hue >= 510 && hue < 765) {
                uint8_t blue = hue - 510;
                it[i] = Color(0, 255, blue);
              } else if (hue >= 765 && hue < 1020) {
                uint8_t green = hue - 765;
                it[i] = Color(0, (255 - green), 255);
              } else if (hue >= 1020 && hue < 1275) {
                uint8_t red = hue - 1020;
                it[i] = Color(red, 0, 255);
              } else if (hue >= 1275 && hue < 1530) {
                uint8_t blue = hue - 1275;
                it[i] = Color(255, 0, (255 - blue));
              }
              hue+=led_change;
              if (hue >= 1530) {
                hue-=1530;
              }
            }
      - addressable_lambda:
          name: "Fire"
          update_interval: 5ms
          lambda: |-
            for( int Pixel = 0; Pixel <= it.size(); Pixel++) {
              it[Pixel] = ESPColor(165, 93, 37);
              ESPColor color1;
              uint8_t r1,g1,b1;
              uint8_t r2,g2,b2;
              uint8_t r3,g3,b3;
              int16_t r,g,b;

              color1 = it[Pixel].get();
              //int color2[] = {80,35,0};
              int color2[] = {189, 131, 17};
      
              r1 = (color1[0] ),
              g1 = (color1[1] ),
              b1 = (color1[2] );

              r2 = (color2[0] ),
              g2 = (color2[1] ),
              b2 = (color2[2] );

              // Add Color
              it[Pixel] = ESPColor(constrain(r1+r2, 0, 255), constrain(g1+g2, 0, 255), constrain(b1+b2, 0, 255));
              int rc = random(120);

              // subtract
              
              color2[0] = rc;
              color2[1] = rc/2;
              color2[2] = rc/2;

              r1 = (color1[0] ),
              g1 = (color1[1] ),
              b1 = (color1[2] );

              r2 = (color2[0] ),
              g2 = (color2[1] ),
              b2 = (color2[2] );

              r=(int16_t)r1-(int16_t)r2;
              g=(int16_t)g1-(int16_t)g2;
              b=(int16_t)b1-(int16_t)b2;
              if(r<0) r=0;
              if(g<0) g=0;
              if(b<0) b=0;

              /// Substract Color
              it[Pixel] = ESPColor(r, g, b);
            }
            delay(random(10,120));

uart:
  rx_pin: D5
  tx_pin: D6
  baud_rate: 9600

sensor:
  - platform: mhz19
    id: mhz19_id
    co2:
      name: "${human_devicename} CO2"
    temperature:
      name: "${human_devicename} Temperature"
    update_interval: 60s

button:
  - platform: template
    name: "CO2 Calibation"
    entity_category: config
    icon: mdi:cached
    on_press:
      - delay: 20min
      - mhz19.calibrate_zero: mhz19_id
